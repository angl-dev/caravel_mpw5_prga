// Automatically generated by PRGA's RTL generator
module tile_clb (
`ifdef USE_POWER_PINS
    inout vccd1,	// User area 1 1.8V supply
    inout vssd1,	// User area 1 digital ground
`endif
    output wire [19:0] cu_x0y0n_L1
    , output wire [19:0] cu_x0y0s_L1
    , input wire [19:0] bi_u1y0n_L1
    , input wire [19:0] bi_u1y0s_L1
    , input wire [0:0] clk
    , input wire [0:0] prog_clk
    , input wire [0:0] prog_rst
    , input wire [0:0] prog_done
    , input wire [0:0] prog_we
    , input wire [0:0] prog_din
    , output wire [0:0] prog_dout
    , output wire [0:0] prog_we_o
    );
    
        
    wire [3:0] _i_blk__out;
    wire [0:0] _i_blk__prog_dout;
    wire [0:0] _i_blk__prog_we_o;
    wire [19:0] _i_cbox_e0__cu_x0y0n_L1;
    wire [19:0] _i_cbox_e0__cu_x0y0s_L1;
    wire [7:0] _i_cbox_w0__bp_x0y0i0_in;
    wire [0:0] _i_cbox_w0__prog_dout;
    wire [0:0] _i_cbox_w0__prog_we_o;
    wire [0:0] _i_buf_prog_rst_l0__Q;
    wire [0:0] _i_buf_prog_done_l0__Q;
    wire [0:0] _i_buf_prog_rst_l1__Q;
    wire [0:0] _i_buf_prog_done_l1__Q;
        
    clb i_blk (
        .clk(clk)
        ,.in(_i_cbox_w0__bp_x0y0i0_in)
        ,.out(_i_blk__out)
        ,.prog_clk(prog_clk)
        ,.prog_rst(_i_buf_prog_rst_l1__Q)
        ,.prog_done(_i_buf_prog_done_l1__Q)
        ,.prog_we(prog_we)
        ,.prog_din(prog_din)
        ,.prog_dout(_i_blk__prog_dout)
        ,.prog_we_o(_i_blk__prog_we_o)
        );
    cbox_tile_clb_e0 i_cbox_e0 (
        .bp_x0y0i0_out(_i_blk__out)
        ,.cu_x0y0n_L1(_i_cbox_e0__cu_x0y0n_L1)
        ,.cu_x0y0s_L1(_i_cbox_e0__cu_x0y0s_L1)
        ,.prog_clk(prog_clk)
        ,.prog_rst(_i_buf_prog_rst_l1__Q)
        ,.prog_done(_i_buf_prog_done_l1__Q)
        );
    cbox_tile_clb_w0 i_cbox_w0 (
        .bp_x0y0i0_in(_i_cbox_w0__bp_x0y0i0_in)
        ,.bi_u1y0n_L1(bi_u1y0n_L1)
        ,.bi_u1y0s_L1(bi_u1y0s_L1)
        ,.prog_clk(prog_clk)
        ,.prog_rst(_i_buf_prog_rst_l1__Q)
        ,.prog_done(_i_buf_prog_done_l1__Q)
        ,.prog_we(_i_blk__prog_we_o)
        ,.prog_din(_i_blk__prog_dout)
        ,.prog_dout(_i_cbox_w0__prog_dout)
        ,.prog_we_o(_i_cbox_w0__prog_we_o)
        );
    prga_simple_buf i_buf_prog_rst_l0 (
        .C(prog_clk)
        ,.D(_i_buf_prog_rst_l1__Q)
        ,.Q(_i_buf_prog_rst_l0__Q)
        );
    prga_simple_bufr i_buf_prog_done_l0 (
        .C(prog_clk)
        ,.R(_i_buf_prog_rst_l0__Q)
        ,.D(_i_buf_prog_done_l1__Q)
        ,.Q(_i_buf_prog_done_l0__Q)
        );
    prga_simple_buf i_buf_prog_rst_l1 (
        .C(prog_clk)
        ,.D(prog_rst)
        ,.Q(_i_buf_prog_rst_l1__Q)
        );
    prga_simple_bufr i_buf_prog_done_l1 (
        .C(prog_clk)
        ,.R(_i_buf_prog_rst_l0__Q)
        ,.D(prog_done)
        ,.Q(_i_buf_prog_done_l1__Q)
        );
        
    assign cu_x0y0n_L1 = _i_cbox_e0__cu_x0y0n_L1;
    assign cu_x0y0s_L1 = _i_cbox_e0__cu_x0y0s_L1;
    assign prog_dout = _i_cbox_w0__prog_dout;
    assign prog_we_o = _i_cbox_w0__prog_we_o;

endmodule
// Automatically generated by PRGA's RTL generator
module clb (
    input wire [0:0] clk
    , input wire [7:0] in
    , output wire [3:0] out
    , input wire [0:0] prog_clk
    , input wire [0:0] prog_rst
    , input wire [0:0] prog_done
    , input wire [0:0] prog_we
    , input wire [0:0] prog_din
    , output wire [0:0] prog_dout
    , output wire [0:0] prog_we_o
    );
    
        
    wire [0:0] _cluster_i0__o;
    wire [0:0] _cluster_i0__prog_dout;
    wire [0:0] _cluster_i1__o;
    wire [0:0] _cluster_i1__prog_dout;
    wire [0:0] _cluster_i2__o;
    wire [0:0] _cluster_i2__prog_dout;
    wire [0:0] _cluster_i3__o;
    wire [0:0] _cluster_i3__prog_dout;
    wire [0:0] _i_sw_cluster_i0_i_0__o;
    wire [0:0] _i_sw_cluster_i0_i_1__o;
    wire [0:0] _i_sw_cluster_i0_i_2__o;
    wire [0:0] _i_sw_cluster_i0_i_3__o;
    wire [0:0] _i_sw_cluster_i1_i_0__o;
    wire [0:0] _i_sw_cluster_i1_i_1__o;
    wire [0:0] _i_sw_cluster_i1_i_2__o;
    wire [0:0] _i_sw_cluster_i1_i_3__o;
    wire [0:0] _i_sw_cluster_i2_i_0__o;
    wire [0:0] _i_sw_cluster_i2_i_1__o;
    wire [0:0] _i_sw_cluster_i2_i_2__o;
    wire [0:0] _i_sw_cluster_i2_i_3__o;
    wire [0:0] _i_sw_cluster_i3_i_0__o;
    wire [0:0] _i_sw_cluster_i3_i_1__o;
    wire [0:0] _i_sw_cluster_i3_i_2__o;
    wire [0:0] _i_sw_cluster_i3_i_3__o;
    wire [0:0] _i_buf_prog_rst_l0__Q;
    wire [0:0] _i_buf_prog_done_l0__Q;
    wire [0:0] _i_scanchain_head__prog_dout;
    wire [0:0] _i_scanchain_head__prog_we_o;
    wire [0:0] _i_prog_data_i_sw_cluster_i0_i_0__prog_dout;
    wire [1:0] _i_prog_data_i_sw_cluster_i0_i_0__prog_data;
    wire [0:0] _i_prog_data_i_sw_cluster_i0_i_1__prog_dout;
    wire [1:0] _i_prog_data_i_sw_cluster_i0_i_1__prog_data;
    wire [0:0] _i_prog_data_i_sw_cluster_i0_i_2__prog_dout;
    wire [1:0] _i_prog_data_i_sw_cluster_i0_i_2__prog_data;
    wire [0:0] _i_prog_data_i_sw_cluster_i0_i_3__prog_dout;
    wire [1:0] _i_prog_data_i_sw_cluster_i0_i_3__prog_data;
    wire [0:0] _i_prog_data_i_sw_cluster_i1_i_0__prog_dout;
    wire [1:0] _i_prog_data_i_sw_cluster_i1_i_0__prog_data;
    wire [0:0] _i_prog_data_i_sw_cluster_i1_i_1__prog_dout;
    wire [1:0] _i_prog_data_i_sw_cluster_i1_i_1__prog_data;
    wire [0:0] _i_prog_data_i_sw_cluster_i1_i_2__prog_dout;
    wire [1:0] _i_prog_data_i_sw_cluster_i1_i_2__prog_data;
    wire [0:0] _i_prog_data_i_sw_cluster_i1_i_3__prog_dout;
    wire [1:0] _i_prog_data_i_sw_cluster_i1_i_3__prog_data;
    wire [0:0] _i_prog_data_i_sw_cluster_i2_i_0__prog_dout;
    wire [1:0] _i_prog_data_i_sw_cluster_i2_i_0__prog_data;
    wire [0:0] _i_prog_data_i_sw_cluster_i2_i_1__prog_dout;
    wire [1:0] _i_prog_data_i_sw_cluster_i2_i_1__prog_data;
    wire [0:0] _i_prog_data_i_sw_cluster_i2_i_2__prog_dout;
    wire [1:0] _i_prog_data_i_sw_cluster_i2_i_2__prog_data;
    wire [0:0] _i_prog_data_i_sw_cluster_i2_i_3__prog_dout;
    wire [1:0] _i_prog_data_i_sw_cluster_i2_i_3__prog_data;
    wire [0:0] _i_prog_data_i_sw_cluster_i3_i_0__prog_dout;
    wire [1:0] _i_prog_data_i_sw_cluster_i3_i_0__prog_data;
    wire [0:0] _i_prog_data_i_sw_cluster_i3_i_1__prog_dout;
    wire [1:0] _i_prog_data_i_sw_cluster_i3_i_1__prog_data;
    wire [0:0] _i_prog_data_i_sw_cluster_i3_i_2__prog_dout;
    wire [1:0] _i_prog_data_i_sw_cluster_i3_i_2__prog_data;
    wire [0:0] _i_prog_data_i_sw_cluster_i3_i_3__prog_dout;
    wire [1:0] _i_prog_data_i_sw_cluster_i3_i_3__prog_data;
    wire [0:0] _i_scanchain_tail__prog_dout;
    wire [0:0] _i_scanchain_tail__prog_we_o;
        
    slice cluster_i0 (
        .clk(clk)
        ,.i({_i_sw_cluster_i0_i_3__o,
            _i_sw_cluster_i0_i_2__o,
            _i_sw_cluster_i0_i_1__o,
            _i_sw_cluster_i0_i_0__o})
        ,.o(_cluster_i0__o)
        ,.prog_clk(prog_clk)
        ,.prog_rst(_i_buf_prog_rst_l0__Q)
        ,.prog_done(_i_buf_prog_done_l0__Q)
        ,.prog_we(_i_scanchain_head__prog_we_o)
        ,.prog_din(_i_scanchain_head__prog_dout)
        ,.prog_dout(_cluster_i0__prog_dout)
        );
    slice cluster_i1 (
        .clk(clk)
        ,.i({_i_sw_cluster_i1_i_3__o,
            _i_sw_cluster_i1_i_2__o,
            _i_sw_cluster_i1_i_1__o,
            _i_sw_cluster_i1_i_0__o})
        ,.o(_cluster_i1__o)
        ,.prog_clk(prog_clk)
        ,.prog_rst(_i_buf_prog_rst_l0__Q)
        ,.prog_done(_i_buf_prog_done_l0__Q)
        ,.prog_we(_i_scanchain_head__prog_we_o)
        ,.prog_din(_cluster_i0__prog_dout)
        ,.prog_dout(_cluster_i1__prog_dout)
        );
    slice cluster_i2 (
        .clk(clk)
        ,.i({_i_sw_cluster_i2_i_3__o,
            _i_sw_cluster_i2_i_2__o,
            _i_sw_cluster_i2_i_1__o,
            _i_sw_cluster_i2_i_0__o})
        ,.o(_cluster_i2__o)
        ,.prog_clk(prog_clk)
        ,.prog_rst(_i_buf_prog_rst_l0__Q)
        ,.prog_done(_i_buf_prog_done_l0__Q)
        ,.prog_we(_i_scanchain_head__prog_we_o)
        ,.prog_din(_cluster_i1__prog_dout)
        ,.prog_dout(_cluster_i2__prog_dout)
        );
    slice cluster_i3 (
        .clk(clk)
        ,.i({_i_sw_cluster_i3_i_3__o,
            _i_sw_cluster_i3_i_2__o,
            _i_sw_cluster_i3_i_1__o,
            _i_sw_cluster_i3_i_0__o})
        ,.o(_cluster_i3__o)
        ,.prog_clk(prog_clk)
        ,.prog_rst(_i_buf_prog_rst_l0__Q)
        ,.prog_done(_i_buf_prog_done_l0__Q)
        ,.prog_we(_i_scanchain_head__prog_we_o)
        ,.prog_din(_cluster_i2__prog_dout)
        ,.prog_dout(_cluster_i3__prog_dout)
        );
    sw2 i_sw_cluster_i0_i_0 (
        .i({in[4],
            in[0]})
        ,.o(_i_sw_cluster_i0_i_0__o)
        ,.prog_done(_i_buf_prog_done_l0__Q)
        ,.prog_data(_i_prog_data_i_sw_cluster_i0_i_0__prog_data)
        );
    sw3 i_sw_cluster_i0_i_1 (
        .i({_cluster_i1__o,
            in[5],
            in[1]})
        ,.o(_i_sw_cluster_i0_i_1__o)
        ,.prog_done(_i_buf_prog_done_l0__Q)
        ,.prog_data(_i_prog_data_i_sw_cluster_i0_i_1__prog_data)
        );
    sw3 i_sw_cluster_i0_i_2 (
        .i({_cluster_i2__o,
            in[6],
            in[2]})
        ,.o(_i_sw_cluster_i0_i_2__o)
        ,.prog_done(_i_buf_prog_done_l0__Q)
        ,.prog_data(_i_prog_data_i_sw_cluster_i0_i_2__prog_data)
        );
    sw3 i_sw_cluster_i0_i_3 (
        .i({_cluster_i3__o,
            in[7],
            in[3]})
        ,.o(_i_sw_cluster_i0_i_3__o)
        ,.prog_done(_i_buf_prog_done_l0__Q)
        ,.prog_data(_i_prog_data_i_sw_cluster_i0_i_3__prog_data)
        );
    sw3 i_sw_cluster_i1_i_0 (
        .i({_cluster_i0__o,
            in[4],
            in[0]})
        ,.o(_i_sw_cluster_i1_i_0__o)
        ,.prog_done(_i_buf_prog_done_l0__Q)
        ,.prog_data(_i_prog_data_i_sw_cluster_i1_i_0__prog_data)
        );
    sw2 i_sw_cluster_i1_i_1 (
        .i({in[5],
            in[1]})
        ,.o(_i_sw_cluster_i1_i_1__o)
        ,.prog_done(_i_buf_prog_done_l0__Q)
        ,.prog_data(_i_prog_data_i_sw_cluster_i1_i_1__prog_data)
        );
    sw3 i_sw_cluster_i1_i_2 (
        .i({_cluster_i2__o,
            in[6],
            in[2]})
        ,.o(_i_sw_cluster_i1_i_2__o)
        ,.prog_done(_i_buf_prog_done_l0__Q)
        ,.prog_data(_i_prog_data_i_sw_cluster_i1_i_2__prog_data)
        );
    sw3 i_sw_cluster_i1_i_3 (
        .i({_cluster_i3__o,
            in[7],
            in[3]})
        ,.o(_i_sw_cluster_i1_i_3__o)
        ,.prog_done(_i_buf_prog_done_l0__Q)
        ,.prog_data(_i_prog_data_i_sw_cluster_i1_i_3__prog_data)
        );
    sw3 i_sw_cluster_i2_i_0 (
        .i({_cluster_i0__o,
            in[4],
            in[0]})
        ,.o(_i_sw_cluster_i2_i_0__o)
        ,.prog_done(_i_buf_prog_done_l0__Q)
        ,.prog_data(_i_prog_data_i_sw_cluster_i2_i_0__prog_data)
        );
    sw3 i_sw_cluster_i2_i_1 (
        .i({_cluster_i1__o,
            in[5],
            in[1]})
        ,.o(_i_sw_cluster_i2_i_1__o)
        ,.prog_done(_i_buf_prog_done_l0__Q)
        ,.prog_data(_i_prog_data_i_sw_cluster_i2_i_1__prog_data)
        );
    sw2 i_sw_cluster_i2_i_2 (
        .i({in[6],
            in[2]})
        ,.o(_i_sw_cluster_i2_i_2__o)
        ,.prog_done(_i_buf_prog_done_l0__Q)
        ,.prog_data(_i_prog_data_i_sw_cluster_i2_i_2__prog_data)
        );
    sw3 i_sw_cluster_i2_i_3 (
        .i({_cluster_i3__o,
            in[7],
            in[3]})
        ,.o(_i_sw_cluster_i2_i_3__o)
        ,.prog_done(_i_buf_prog_done_l0__Q)
        ,.prog_data(_i_prog_data_i_sw_cluster_i2_i_3__prog_data)
        );
    sw3 i_sw_cluster_i3_i_0 (
        .i({_cluster_i0__o,
            in[4],
            in[0]})
        ,.o(_i_sw_cluster_i3_i_0__o)
        ,.prog_done(_i_buf_prog_done_l0__Q)
        ,.prog_data(_i_prog_data_i_sw_cluster_i3_i_0__prog_data)
        );
    sw3 i_sw_cluster_i3_i_1 (
        .i({_cluster_i1__o,
            in[5],
            in[1]})
        ,.o(_i_sw_cluster_i3_i_1__o)
        ,.prog_done(_i_buf_prog_done_l0__Q)
        ,.prog_data(_i_prog_data_i_sw_cluster_i3_i_1__prog_data)
        );
    sw3 i_sw_cluster_i3_i_2 (
        .i({_cluster_i2__o,
            in[6],
            in[2]})
        ,.o(_i_sw_cluster_i3_i_2__o)
        ,.prog_done(_i_buf_prog_done_l0__Q)
        ,.prog_data(_i_prog_data_i_sw_cluster_i3_i_2__prog_data)
        );
    sw2 i_sw_cluster_i3_i_3 (
        .i({in[7],
            in[3]})
        ,.o(_i_sw_cluster_i3_i_3__o)
        ,.prog_done(_i_buf_prog_done_l0__Q)
        ,.prog_data(_i_prog_data_i_sw_cluster_i3_i_3__prog_data)
        );
    prga_simple_buf i_buf_prog_rst_l0 (
        .C(prog_clk)
        ,.D(prog_rst)
        ,.Q(_i_buf_prog_rst_l0__Q)
        );
    prga_simple_bufr i_buf_prog_done_l0 (
        .C(prog_clk)
        ,.R(_i_buf_prog_rst_l0__Q)
        ,.D(prog_done)
        ,.Q(_i_buf_prog_done_l0__Q)
        );
    scanchain_delim i_scanchain_head (
        .prog_clk(prog_clk)
        ,.prog_rst(_i_buf_prog_rst_l0__Q)
        ,.prog_done(_i_buf_prog_done_l0__Q)
        ,.prog_we(prog_we)
        ,.prog_din(prog_din)
        ,.prog_dout(_i_scanchain_head__prog_dout)
        ,.prog_we_o(_i_scanchain_head__prog_we_o)
        );
    scanchain_data_d2 i_prog_data_i_sw_cluster_i0_i_0 (
        .prog_clk(prog_clk)
        ,.prog_rst(_i_buf_prog_rst_l0__Q)
        ,.prog_done(_i_buf_prog_done_l0__Q)
        ,.prog_we(_i_scanchain_head__prog_we_o)
        ,.prog_din(_cluster_i3__prog_dout)
        ,.prog_dout(_i_prog_data_i_sw_cluster_i0_i_0__prog_dout)
        ,.prog_data(_i_prog_data_i_sw_cluster_i0_i_0__prog_data)
        );
    scanchain_data_d2 i_prog_data_i_sw_cluster_i0_i_1 (
        .prog_clk(prog_clk)
        ,.prog_rst(_i_buf_prog_rst_l0__Q)
        ,.prog_done(_i_buf_prog_done_l0__Q)
        ,.prog_we(_i_scanchain_head__prog_we_o)
        ,.prog_din(_i_prog_data_i_sw_cluster_i0_i_0__prog_dout)
        ,.prog_dout(_i_prog_data_i_sw_cluster_i0_i_1__prog_dout)
        ,.prog_data(_i_prog_data_i_sw_cluster_i0_i_1__prog_data)
        );
    scanchain_data_d2 i_prog_data_i_sw_cluster_i0_i_2 (
        .prog_clk(prog_clk)
        ,.prog_rst(_i_buf_prog_rst_l0__Q)
        ,.prog_done(_i_buf_prog_done_l0__Q)
        ,.prog_we(_i_scanchain_head__prog_we_o)
        ,.prog_din(_i_prog_data_i_sw_cluster_i0_i_1__prog_dout)
        ,.prog_dout(_i_prog_data_i_sw_cluster_i0_i_2__prog_dout)
        ,.prog_data(_i_prog_data_i_sw_cluster_i0_i_2__prog_data)
        );
    scanchain_data_d2 i_prog_data_i_sw_cluster_i0_i_3 (
        .prog_clk(prog_clk)
        ,.prog_rst(_i_buf_prog_rst_l0__Q)
        ,.prog_done(_i_buf_prog_done_l0__Q)
        ,.prog_we(_i_scanchain_head__prog_we_o)
        ,.prog_din(_i_prog_data_i_sw_cluster_i0_i_2__prog_dout)
        ,.prog_dout(_i_prog_data_i_sw_cluster_i0_i_3__prog_dout)
        ,.prog_data(_i_prog_data_i_sw_cluster_i0_i_3__prog_data)
        );
    scanchain_data_d2 i_prog_data_i_sw_cluster_i1_i_0 (
        .prog_clk(prog_clk)
        ,.prog_rst(_i_buf_prog_rst_l0__Q)
        ,.prog_done(_i_buf_prog_done_l0__Q)
        ,.prog_we(_i_scanchain_head__prog_we_o)
        ,.prog_din(_i_prog_data_i_sw_cluster_i0_i_3__prog_dout)
        ,.prog_dout(_i_prog_data_i_sw_cluster_i1_i_0__prog_dout)
        ,.prog_data(_i_prog_data_i_sw_cluster_i1_i_0__prog_data)
        );
    scanchain_data_d2 i_prog_data_i_sw_cluster_i1_i_1 (
        .prog_clk(prog_clk)
        ,.prog_rst(_i_buf_prog_rst_l0__Q)
        ,.prog_done(_i_buf_prog_done_l0__Q)
        ,.prog_we(_i_scanchain_head__prog_we_o)
        ,.prog_din(_i_prog_data_i_sw_cluster_i1_i_0__prog_dout)
        ,.prog_dout(_i_prog_data_i_sw_cluster_i1_i_1__prog_dout)
        ,.prog_data(_i_prog_data_i_sw_cluster_i1_i_1__prog_data)
        );
    scanchain_data_d2 i_prog_data_i_sw_cluster_i1_i_2 (
        .prog_clk(prog_clk)
        ,.prog_rst(_i_buf_prog_rst_l0__Q)
        ,.prog_done(_i_buf_prog_done_l0__Q)
        ,.prog_we(_i_scanchain_head__prog_we_o)
        ,.prog_din(_i_prog_data_i_sw_cluster_i1_i_1__prog_dout)
        ,.prog_dout(_i_prog_data_i_sw_cluster_i1_i_2__prog_dout)
        ,.prog_data(_i_prog_data_i_sw_cluster_i1_i_2__prog_data)
        );
    scanchain_data_d2 i_prog_data_i_sw_cluster_i1_i_3 (
        .prog_clk(prog_clk)
        ,.prog_rst(_i_buf_prog_rst_l0__Q)
        ,.prog_done(_i_buf_prog_done_l0__Q)
        ,.prog_we(_i_scanchain_head__prog_we_o)
        ,.prog_din(_i_prog_data_i_sw_cluster_i1_i_2__prog_dout)
        ,.prog_dout(_i_prog_data_i_sw_cluster_i1_i_3__prog_dout)
        ,.prog_data(_i_prog_data_i_sw_cluster_i1_i_3__prog_data)
        );
    scanchain_data_d2 i_prog_data_i_sw_cluster_i2_i_0 (
        .prog_clk(prog_clk)
        ,.prog_rst(_i_buf_prog_rst_l0__Q)
        ,.prog_done(_i_buf_prog_done_l0__Q)
        ,.prog_we(_i_scanchain_head__prog_we_o)
        ,.prog_din(_i_prog_data_i_sw_cluster_i1_i_3__prog_dout)
        ,.prog_dout(_i_prog_data_i_sw_cluster_i2_i_0__prog_dout)
        ,.prog_data(_i_prog_data_i_sw_cluster_i2_i_0__prog_data)
        );
    scanchain_data_d2 i_prog_data_i_sw_cluster_i2_i_1 (
        .prog_clk(prog_clk)
        ,.prog_rst(_i_buf_prog_rst_l0__Q)
        ,.prog_done(_i_buf_prog_done_l0__Q)
        ,.prog_we(_i_scanchain_head__prog_we_o)
        ,.prog_din(_i_prog_data_i_sw_cluster_i2_i_0__prog_dout)
        ,.prog_dout(_i_prog_data_i_sw_cluster_i2_i_1__prog_dout)
        ,.prog_data(_i_prog_data_i_sw_cluster_i2_i_1__prog_data)
        );
    scanchain_data_d2 i_prog_data_i_sw_cluster_i2_i_2 (
        .prog_clk(prog_clk)
        ,.prog_rst(_i_buf_prog_rst_l0__Q)
        ,.prog_done(_i_buf_prog_done_l0__Q)
        ,.prog_we(_i_scanchain_head__prog_we_o)
        ,.prog_din(_i_prog_data_i_sw_cluster_i2_i_1__prog_dout)
        ,.prog_dout(_i_prog_data_i_sw_cluster_i2_i_2__prog_dout)
        ,.prog_data(_i_prog_data_i_sw_cluster_i2_i_2__prog_data)
        );
    scanchain_data_d2 i_prog_data_i_sw_cluster_i2_i_3 (
        .prog_clk(prog_clk)
        ,.prog_rst(_i_buf_prog_rst_l0__Q)
        ,.prog_done(_i_buf_prog_done_l0__Q)
        ,.prog_we(_i_scanchain_head__prog_we_o)
        ,.prog_din(_i_prog_data_i_sw_cluster_i2_i_2__prog_dout)
        ,.prog_dout(_i_prog_data_i_sw_cluster_i2_i_3__prog_dout)
        ,.prog_data(_i_prog_data_i_sw_cluster_i2_i_3__prog_data)
        );
    scanchain_data_d2 i_prog_data_i_sw_cluster_i3_i_0 (
        .prog_clk(prog_clk)
        ,.prog_rst(_i_buf_prog_rst_l0__Q)
        ,.prog_done(_i_buf_prog_done_l0__Q)
        ,.prog_we(_i_scanchain_head__prog_we_o)
        ,.prog_din(_i_prog_data_i_sw_cluster_i2_i_3__prog_dout)
        ,.prog_dout(_i_prog_data_i_sw_cluster_i3_i_0__prog_dout)
        ,.prog_data(_i_prog_data_i_sw_cluster_i3_i_0__prog_data)
        );
    scanchain_data_d2 i_prog_data_i_sw_cluster_i3_i_1 (
        .prog_clk(prog_clk)
        ,.prog_rst(_i_buf_prog_rst_l0__Q)
        ,.prog_done(_i_buf_prog_done_l0__Q)
        ,.prog_we(_i_scanchain_head__prog_we_o)
        ,.prog_din(_i_prog_data_i_sw_cluster_i3_i_0__prog_dout)
        ,.prog_dout(_i_prog_data_i_sw_cluster_i3_i_1__prog_dout)
        ,.prog_data(_i_prog_data_i_sw_cluster_i3_i_1__prog_data)
        );
    scanchain_data_d2 i_prog_data_i_sw_cluster_i3_i_2 (
        .prog_clk(prog_clk)
        ,.prog_rst(_i_buf_prog_rst_l0__Q)
        ,.prog_done(_i_buf_prog_done_l0__Q)
        ,.prog_we(_i_scanchain_head__prog_we_o)
        ,.prog_din(_i_prog_data_i_sw_cluster_i3_i_1__prog_dout)
        ,.prog_dout(_i_prog_data_i_sw_cluster_i3_i_2__prog_dout)
        ,.prog_data(_i_prog_data_i_sw_cluster_i3_i_2__prog_data)
        );
    scanchain_data_d2 i_prog_data_i_sw_cluster_i3_i_3 (
        .prog_clk(prog_clk)
        ,.prog_rst(_i_buf_prog_rst_l0__Q)
        ,.prog_done(_i_buf_prog_done_l0__Q)
        ,.prog_we(_i_scanchain_head__prog_we_o)
        ,.prog_din(_i_prog_data_i_sw_cluster_i3_i_2__prog_dout)
        ,.prog_dout(_i_prog_data_i_sw_cluster_i3_i_3__prog_dout)
        ,.prog_data(_i_prog_data_i_sw_cluster_i3_i_3__prog_data)
        );
    scanchain_delim i_scanchain_tail (
        .prog_clk(prog_clk)
        ,.prog_rst(_i_buf_prog_rst_l0__Q)
        ,.prog_done(_i_buf_prog_done_l0__Q)
        ,.prog_we(_i_scanchain_head__prog_we_o)
        ,.prog_din(_i_prog_data_i_sw_cluster_i3_i_3__prog_dout)
        ,.prog_dout(_i_scanchain_tail__prog_dout)
        ,.prog_we_o(_i_scanchain_tail__prog_we_o)
        );
        
    assign out = {_cluster_i3__o,
        _cluster_i2__o,
        _cluster_i1__o,
        _cluster_i0__o};
    assign prog_dout = _i_scanchain_tail__prog_dout;
    assign prog_we_o = _i_scanchain_tail__prog_we_o;

endmodule
// Automatically generated by PRGA's RTL generator
module cbox_tile_clb_e0 (
    input wire [3:0] bp_x0y0i0_out
    , output wire [19:0] cu_x0y0n_L1
    , output wire [19:0] cu_x0y0s_L1
    , input wire [0:0] prog_clk
    , input wire [0:0] prog_rst
    , input wire [0:0] prog_done
    );
    
        
    wire [0:0] _i_buf_prog_rst_l0__Q;
    wire [0:0] _i_buf_prog_done_l0__Q;
        
    prga_simple_buf i_buf_prog_rst_l0 (
        .C(prog_clk)
        ,.D(prog_rst)
        ,.Q(_i_buf_prog_rst_l0__Q)
        );
    prga_simple_bufr i_buf_prog_done_l0 (
        .C(prog_clk)
        ,.R(_i_buf_prog_rst_l0__Q)
        ,.D(prog_done)
        ,.Q(_i_buf_prog_done_l0__Q)
        );
        
    assign cu_x0y0n_L1 = {bp_x0y0i0_out[1],
        bp_x0y0i0_out[2],
        bp_x0y0i0_out[3],
        bp_x0y0i0_out[0],
        bp_x0y0i0_out[1],
        bp_x0y0i0_out[2],
        bp_x0y0i0_out[3],
        bp_x0y0i0_out[0],
        bp_x0y0i0_out[1],
        bp_x0y0i0_out[2],
        bp_x0y0i0_out[3],
        bp_x0y0i0_out[0],
        bp_x0y0i0_out[1],
        bp_x0y0i0_out[2],
        bp_x0y0i0_out[3],
        bp_x0y0i0_out[0],
        bp_x0y0i0_out[1],
        bp_x0y0i0_out[2],
        bp_x0y0i0_out[3],
        bp_x0y0i0_out[0]};
    assign cu_x0y0s_L1 = {bp_x0y0i0_out[1],
        bp_x0y0i0_out[2],
        bp_x0y0i0_out[3],
        bp_x0y0i0_out[0],
        bp_x0y0i0_out[1],
        bp_x0y0i0_out[2],
        bp_x0y0i0_out[3],
        bp_x0y0i0_out[0],
        bp_x0y0i0_out[1],
        bp_x0y0i0_out[2],
        bp_x0y0i0_out[3],
        bp_x0y0i0_out[0],
        bp_x0y0i0_out[1],
        bp_x0y0i0_out[2],
        bp_x0y0i0_out[3],
        bp_x0y0i0_out[0],
        bp_x0y0i0_out[1],
        bp_x0y0i0_out[2],
        bp_x0y0i0_out[3],
        bp_x0y0i0_out[0]};

endmodule
// Automatically generated by PRGA's RTL generator
module cbox_tile_clb_w0 (
    output wire [7:0] bp_x0y0i0_in
    , input wire [19:0] bi_u1y0n_L1
    , input wire [19:0] bi_u1y0s_L1
    , input wire [0:0] prog_clk
    , input wire [0:0] prog_rst
    , input wire [0:0] prog_done
    , input wire [0:0] prog_we
    , input wire [0:0] prog_din
    , output wire [0:0] prog_dout
    , output wire [0:0] prog_we_o
    );
    
        
    wire [0:0] _i_sw_bp_x0y0i0_in_0__o;
    wire [0:0] _i_sw_bp_x0y0i0_in_1__o;
    wire [0:0] _i_sw_bp_x0y0i0_in_2__o;
    wire [0:0] _i_sw_bp_x0y0i0_in_3__o;
    wire [0:0] _i_sw_bp_x0y0i0_in_4__o;
    wire [0:0] _i_sw_bp_x0y0i0_in_5__o;
    wire [0:0] _i_sw_bp_x0y0i0_in_6__o;
    wire [0:0] _i_sw_bp_x0y0i0_in_7__o;
    wire [0:0] _i_buf_prog_rst_l0__Q;
    wire [0:0] _i_buf_prog_done_l0__Q;
    wire [0:0] _i_scanchain_head__prog_dout;
    wire [0:0] _i_scanchain_head__prog_we_o;
    wire [0:0] _i_prog_data_i_sw_bp_x0y0i0_in_0__prog_dout;
    wire [4:0] _i_prog_data_i_sw_bp_x0y0i0_in_0__prog_data;
    wire [0:0] _i_prog_data_i_sw_bp_x0y0i0_in_1__prog_dout;
    wire [4:0] _i_prog_data_i_sw_bp_x0y0i0_in_1__prog_data;
    wire [0:0] _i_prog_data_i_sw_bp_x0y0i0_in_2__prog_dout;
    wire [4:0] _i_prog_data_i_sw_bp_x0y0i0_in_2__prog_data;
    wire [0:0] _i_prog_data_i_sw_bp_x0y0i0_in_3__prog_dout;
    wire [4:0] _i_prog_data_i_sw_bp_x0y0i0_in_3__prog_data;
    wire [0:0] _i_prog_data_i_sw_bp_x0y0i0_in_4__prog_dout;
    wire [4:0] _i_prog_data_i_sw_bp_x0y0i0_in_4__prog_data;
    wire [0:0] _i_prog_data_i_sw_bp_x0y0i0_in_5__prog_dout;
    wire [4:0] _i_prog_data_i_sw_bp_x0y0i0_in_5__prog_data;
    wire [0:0] _i_prog_data_i_sw_bp_x0y0i0_in_6__prog_dout;
    wire [4:0] _i_prog_data_i_sw_bp_x0y0i0_in_6__prog_data;
    wire [0:0] _i_prog_data_i_sw_bp_x0y0i0_in_7__prog_dout;
    wire [4:0] _i_prog_data_i_sw_bp_x0y0i0_in_7__prog_data;
    wire [0:0] _i_scanchain_tail__prog_dout;
    wire [0:0] _i_scanchain_tail__prog_we_o;
        
    sw16 i_sw_bp_x0y0i0_in_0 (
        .i({bi_u1y0s_L1[18],
            bi_u1y0n_L1[18],
            bi_u1y0s_L1[15],
            bi_u1y0n_L1[15],
            bi_u1y0s_L1[12],
            bi_u1y0n_L1[12],
            bi_u1y0s_L1[10],
            bi_u1y0n_L1[10],
            bi_u1y0s_L1[8],
            bi_u1y0n_L1[8],
            bi_u1y0s_L1[5],
            bi_u1y0n_L1[5],
            bi_u1y0s_L1[2],
            bi_u1y0n_L1[2],
            bi_u1y0s_L1[0],
            bi_u1y0n_L1[0]})
        ,.o(_i_sw_bp_x0y0i0_in_0__o)
        ,.prog_done(_i_buf_prog_done_l0__Q)
        ,.prog_data(_i_prog_data_i_sw_bp_x0y0i0_in_0__prog_data)
        );
    sw16 i_sw_bp_x0y0i0_in_1 (
        .i({bi_u1y0s_L1[19],
            bi_u1y0n_L1[19],
            bi_u1y0s_L1[17],
            bi_u1y0n_L1[17],
            bi_u1y0s_L1[14],
            bi_u1y0n_L1[14],
            bi_u1y0s_L1[11],
            bi_u1y0n_L1[11],
            bi_u1y0s_L1[8],
            bi_u1y0n_L1[8],
            bi_u1y0s_L1[6],
            bi_u1y0n_L1[6],
            bi_u1y0s_L1[4],
            bi_u1y0n_L1[4],
            bi_u1y0s_L1[1],
            bi_u1y0n_L1[1]})
        ,.o(_i_sw_bp_x0y0i0_in_1__o)
        ,.prog_done(_i_buf_prog_done_l0__Q)
        ,.prog_data(_i_prog_data_i_sw_bp_x0y0i0_in_1__prog_data)
        );
    sw16 i_sw_bp_x0y0i0_in_2 (
        .i({bi_u1y0s_L1[18],
            bi_u1y0n_L1[18],
            bi_u1y0s_L1[16],
            bi_u1y0n_L1[16],
            bi_u1y0s_L1[14],
            bi_u1y0n_L1[14],
            bi_u1y0s_L1[12],
            bi_u1y0n_L1[12],
            bi_u1y0s_L1[9],
            bi_u1y0n_L1[9],
            bi_u1y0s_L1[7],
            bi_u1y0n_L1[7],
            bi_u1y0s_L1[3],
            bi_u1y0n_L1[3],
            bi_u1y0s_L1[0],
            bi_u1y0n_L1[0]})
        ,.o(_i_sw_bp_x0y0i0_in_2__o)
        ,.prog_done(_i_buf_prog_done_l0__Q)
        ,.prog_data(_i_prog_data_i_sw_bp_x0y0i0_in_2__prog_data)
        );
    sw16 i_sw_bp_x0y0i0_in_3 (
        .i({bi_u1y0s_L1[19],
            bi_u1y0n_L1[19],
            bi_u1y0s_L1[17],
            bi_u1y0n_L1[17],
            bi_u1y0s_L1[13],
            bi_u1y0n_L1[13],
            bi_u1y0s_L1[11],
            bi_u1y0n_L1[11],
            bi_u1y0s_L1[8],
            bi_u1y0n_L1[8],
            bi_u1y0s_L1[6],
            bi_u1y0n_L1[6],
            bi_u1y0s_L1[4],
            bi_u1y0n_L1[4],
            bi_u1y0s_L1[1],
            bi_u1y0n_L1[1]})
        ,.o(_i_sw_bp_x0y0i0_in_3__o)
        ,.prog_done(_i_buf_prog_done_l0__Q)
        ,.prog_data(_i_prog_data_i_sw_bp_x0y0i0_in_3__prog_data)
        );
    sw16 i_sw_bp_x0y0i0_in_4 (
        .i({bi_u1y0s_L1[15],
            bi_u1y0n_L1[15],
            bi_u1y0s_L1[13],
            bi_u1y0n_L1[13],
            bi_u1y0s_L1[11],
            bi_u1y0n_L1[11],
            bi_u1y0s_L1[9],
            bi_u1y0n_L1[9],
            bi_u1y0s_L1[7],
            bi_u1y0n_L1[7],
            bi_u1y0s_L1[5],
            bi_u1y0n_L1[5],
            bi_u1y0s_L1[2],
            bi_u1y0n_L1[2],
            bi_u1y0s_L1[0],
            bi_u1y0n_L1[0]})
        ,.o(_i_sw_bp_x0y0i0_in_4__o)
        ,.prog_done(_i_buf_prog_done_l0__Q)
        ,.prog_data(_i_prog_data_i_sw_bp_x0y0i0_in_4__prog_data)
        );
    sw16 i_sw_bp_x0y0i0_in_5 (
        .i({bi_u1y0s_L1[18],
            bi_u1y0n_L1[18],
            bi_u1y0s_L1[16],
            bi_u1y0n_L1[16],
            bi_u1y0s_L1[13],
            bi_u1y0n_L1[13],
            bi_u1y0s_L1[10],
            bi_u1y0n_L1[10],
            bi_u1y0s_L1[8],
            bi_u1y0n_L1[8],
            bi_u1y0s_L1[5],
            bi_u1y0n_L1[5],
            bi_u1y0s_L1[3],
            bi_u1y0n_L1[3],
            bi_u1y0s_L1[0],
            bi_u1y0n_L1[0]})
        ,.o(_i_sw_bp_x0y0i0_in_5__o)
        ,.prog_done(_i_buf_prog_done_l0__Q)
        ,.prog_data(_i_prog_data_i_sw_bp_x0y0i0_in_5__prog_data)
        );
    sw16 i_sw_bp_x0y0i0_in_6 (
        .i({bi_u1y0s_L1[19],
            bi_u1y0n_L1[19],
            bi_u1y0s_L1[17],
            bi_u1y0n_L1[17],
            bi_u1y0s_L1[14],
            bi_u1y0n_L1[14],
            bi_u1y0s_L1[12],
            bi_u1y0n_L1[12],
            bi_u1y0s_L1[10],
            bi_u1y0n_L1[10],
            bi_u1y0s_L1[7],
            bi_u1y0n_L1[7],
            bi_u1y0s_L1[4],
            bi_u1y0n_L1[4],
            bi_u1y0s_L1[1],
            bi_u1y0n_L1[1]})
        ,.o(_i_sw_bp_x0y0i0_in_6__o)
        ,.prog_done(_i_buf_prog_done_l0__Q)
        ,.prog_data(_i_prog_data_i_sw_bp_x0y0i0_in_6__prog_data)
        );
    sw16 i_sw_bp_x0y0i0_in_7 (
        .i({bi_u1y0s_L1[15],
            bi_u1y0n_L1[15],
            bi_u1y0s_L1[13],
            bi_u1y0n_L1[13],
            bi_u1y0s_L1[11],
            bi_u1y0n_L1[11],
            bi_u1y0s_L1[9],
            bi_u1y0n_L1[9],
            bi_u1y0s_L1[8],
            bi_u1y0n_L1[8],
            bi_u1y0s_L1[6],
            bi_u1y0n_L1[6],
            bi_u1y0s_L1[4],
            bi_u1y0n_L1[4],
            bi_u1y0s_L1[2],
            bi_u1y0n_L1[2]})
        ,.o(_i_sw_bp_x0y0i0_in_7__o)
        ,.prog_done(_i_buf_prog_done_l0__Q)
        ,.prog_data(_i_prog_data_i_sw_bp_x0y0i0_in_7__prog_data)
        );
    prga_simple_buf i_buf_prog_rst_l0 (
        .C(prog_clk)
        ,.D(prog_rst)
        ,.Q(_i_buf_prog_rst_l0__Q)
        );
    prga_simple_bufr i_buf_prog_done_l0 (
        .C(prog_clk)
        ,.R(_i_buf_prog_rst_l0__Q)
        ,.D(prog_done)
        ,.Q(_i_buf_prog_done_l0__Q)
        );
    scanchain_delim i_scanchain_head (
        .prog_clk(prog_clk)
        ,.prog_rst(_i_buf_prog_rst_l0__Q)
        ,.prog_done(_i_buf_prog_done_l0__Q)
        ,.prog_we(prog_we)
        ,.prog_din(prog_din)
        ,.prog_dout(_i_scanchain_head__prog_dout)
        ,.prog_we_o(_i_scanchain_head__prog_we_o)
        );
    scanchain_data_d5 i_prog_data_i_sw_bp_x0y0i0_in_0 (
        .prog_clk(prog_clk)
        ,.prog_rst(_i_buf_prog_rst_l0__Q)
        ,.prog_done(_i_buf_prog_done_l0__Q)
        ,.prog_we(_i_scanchain_head__prog_we_o)
        ,.prog_din(_i_scanchain_head__prog_dout)
        ,.prog_dout(_i_prog_data_i_sw_bp_x0y0i0_in_0__prog_dout)
        ,.prog_data(_i_prog_data_i_sw_bp_x0y0i0_in_0__prog_data)
        );
    scanchain_data_d5 i_prog_data_i_sw_bp_x0y0i0_in_1 (
        .prog_clk(prog_clk)
        ,.prog_rst(_i_buf_prog_rst_l0__Q)
        ,.prog_done(_i_buf_prog_done_l0__Q)
        ,.prog_we(_i_scanchain_head__prog_we_o)
        ,.prog_din(_i_prog_data_i_sw_bp_x0y0i0_in_0__prog_dout)
        ,.prog_dout(_i_prog_data_i_sw_bp_x0y0i0_in_1__prog_dout)
        ,.prog_data(_i_prog_data_i_sw_bp_x0y0i0_in_1__prog_data)
        );
    scanchain_data_d5 i_prog_data_i_sw_bp_x0y0i0_in_2 (
        .prog_clk(prog_clk)
        ,.prog_rst(_i_buf_prog_rst_l0__Q)
        ,.prog_done(_i_buf_prog_done_l0__Q)
        ,.prog_we(_i_scanchain_head__prog_we_o)
        ,.prog_din(_i_prog_data_i_sw_bp_x0y0i0_in_1__prog_dout)
        ,.prog_dout(_i_prog_data_i_sw_bp_x0y0i0_in_2__prog_dout)
        ,.prog_data(_i_prog_data_i_sw_bp_x0y0i0_in_2__prog_data)
        );
    scanchain_data_d5 i_prog_data_i_sw_bp_x0y0i0_in_3 (
        .prog_clk(prog_clk)
        ,.prog_rst(_i_buf_prog_rst_l0__Q)
        ,.prog_done(_i_buf_prog_done_l0__Q)
        ,.prog_we(_i_scanchain_head__prog_we_o)
        ,.prog_din(_i_prog_data_i_sw_bp_x0y0i0_in_2__prog_dout)
        ,.prog_dout(_i_prog_data_i_sw_bp_x0y0i0_in_3__prog_dout)
        ,.prog_data(_i_prog_data_i_sw_bp_x0y0i0_in_3__prog_data)
        );
    scanchain_data_d5 i_prog_data_i_sw_bp_x0y0i0_in_4 (
        .prog_clk(prog_clk)
        ,.prog_rst(_i_buf_prog_rst_l0__Q)
        ,.prog_done(_i_buf_prog_done_l0__Q)
        ,.prog_we(_i_scanchain_head__prog_we_o)
        ,.prog_din(_i_prog_data_i_sw_bp_x0y0i0_in_3__prog_dout)
        ,.prog_dout(_i_prog_data_i_sw_bp_x0y0i0_in_4__prog_dout)
        ,.prog_data(_i_prog_data_i_sw_bp_x0y0i0_in_4__prog_data)
        );
    scanchain_data_d5 i_prog_data_i_sw_bp_x0y0i0_in_5 (
        .prog_clk(prog_clk)
        ,.prog_rst(_i_buf_prog_rst_l0__Q)
        ,.prog_done(_i_buf_prog_done_l0__Q)
        ,.prog_we(_i_scanchain_head__prog_we_o)
        ,.prog_din(_i_prog_data_i_sw_bp_x0y0i0_in_4__prog_dout)
        ,.prog_dout(_i_prog_data_i_sw_bp_x0y0i0_in_5__prog_dout)
        ,.prog_data(_i_prog_data_i_sw_bp_x0y0i0_in_5__prog_data)
        );
    scanchain_data_d5 i_prog_data_i_sw_bp_x0y0i0_in_6 (
        .prog_clk(prog_clk)
        ,.prog_rst(_i_buf_prog_rst_l0__Q)
        ,.prog_done(_i_buf_prog_done_l0__Q)
        ,.prog_we(_i_scanchain_head__prog_we_o)
        ,.prog_din(_i_prog_data_i_sw_bp_x0y0i0_in_5__prog_dout)
        ,.prog_dout(_i_prog_data_i_sw_bp_x0y0i0_in_6__prog_dout)
        ,.prog_data(_i_prog_data_i_sw_bp_x0y0i0_in_6__prog_data)
        );
    scanchain_data_d5 i_prog_data_i_sw_bp_x0y0i0_in_7 (
        .prog_clk(prog_clk)
        ,.prog_rst(_i_buf_prog_rst_l0__Q)
        ,.prog_done(_i_buf_prog_done_l0__Q)
        ,.prog_we(_i_scanchain_head__prog_we_o)
        ,.prog_din(_i_prog_data_i_sw_bp_x0y0i0_in_6__prog_dout)
        ,.prog_dout(_i_prog_data_i_sw_bp_x0y0i0_in_7__prog_dout)
        ,.prog_data(_i_prog_data_i_sw_bp_x0y0i0_in_7__prog_data)
        );
    scanchain_delim i_scanchain_tail (
        .prog_clk(prog_clk)
        ,.prog_rst(_i_buf_prog_rst_l0__Q)
        ,.prog_done(_i_buf_prog_done_l0__Q)
        ,.prog_we(_i_scanchain_head__prog_we_o)
        ,.prog_din(_i_prog_data_i_sw_bp_x0y0i0_in_7__prog_dout)
        ,.prog_dout(_i_scanchain_tail__prog_dout)
        ,.prog_we_o(_i_scanchain_tail__prog_we_o)
        );
        
    assign bp_x0y0i0_in = {_i_sw_bp_x0y0i0_in_7__o,
        _i_sw_bp_x0y0i0_in_6__o,
        _i_sw_bp_x0y0i0_in_5__o,
        _i_sw_bp_x0y0i0_in_4__o,
        _i_sw_bp_x0y0i0_in_3__o,
        _i_sw_bp_x0y0i0_in_2__o,
        _i_sw_bp_x0y0i0_in_1__o,
        _i_sw_bp_x0y0i0_in_0__o};
    assign prog_dout = _i_scanchain_tail__prog_dout;
    assign prog_we_o = _i_scanchain_tail__prog_we_o;

endmodule
// Automatically generated by PRGA's RTL generator
module prga_simple_buf (
    input wire [0:0] C,
    input wire [0:0] D,
    output reg [0:0] Q
    );

    always @(posedge C) begin
        Q <= D;
    end

endmodule// Automatically generated by PRGA's RTL generator
module prga_simple_bufr (
    input wire [0:0] C,
    input wire [0:0] R,
    input wire [0:0] D,
    output reg [0:0] Q
    );

    always @(posedge C) begin
        if (R) begin
            Q <= 1'b0;
        end else begin
            Q <= D;
        end
    end

endmodule// Automatically generated by PRGA's RTL generator
module slice (
    input wire [0:0] clk
    , input wire [3:0] i
    , output wire [0:0] o
    , input wire [0:0] prog_clk
    , input wire [0:0] prog_rst
    , input wire [0:0] prog_done
    , input wire [0:0] prog_we
    , input wire [0:0] prog_din
    , output wire [0:0] prog_dout
    );
    
        
    wire [0:0] _lut__out;
    wire [0:0] _ff__Q;
    wire [0:0] _i_sw_o__o;
    wire [0:0] _i_prog_data_lut__prog_dout;
    wire [16:0] _i_prog_data_lut__prog_data;
    wire [0:0] _i_prog_data_ff__prog_dout;
    wire [0:0] _i_prog_data_ff__prog_data;
    wire [0:0] _i_prog_data_i_sw_o__prog_dout;
    wire [1:0] _i_prog_data_i_sw_o__prog_data;
        
    lut4 lut (
        .in(i)
        ,.out(_lut__out)
        ,.prog_done(prog_done)
        ,.prog_data(_i_prog_data_lut__prog_data)
        );
    flipflop ff (
        .clk(clk)
        ,.D(_lut__out)
        ,.Q(_ff__Q)
        ,.prog_done(prog_done)
        ,.prog_data(_i_prog_data_ff__prog_data)
        );
    sw2 i_sw_o (
        .i({_ff__Q,
            _lut__out})
        ,.o(_i_sw_o__o)
        ,.prog_done(prog_done)
        ,.prog_data(_i_prog_data_i_sw_o__prog_data)
        );
    scanchain_data_d17 i_prog_data_lut (
        .prog_clk(prog_clk)
        ,.prog_rst(prog_rst)
        ,.prog_done(prog_done)
        ,.prog_we(prog_we)
        ,.prog_din(prog_din)
        ,.prog_dout(_i_prog_data_lut__prog_dout)
        ,.prog_data(_i_prog_data_lut__prog_data)
        );
    scanchain_data_d1 i_prog_data_ff (
        .prog_clk(prog_clk)
        ,.prog_rst(prog_rst)
        ,.prog_done(prog_done)
        ,.prog_we(prog_we)
        ,.prog_din(_i_prog_data_lut__prog_dout)
        ,.prog_dout(_i_prog_data_ff__prog_dout)
        ,.prog_data(_i_prog_data_ff__prog_data)
        );
    scanchain_data_d2 i_prog_data_i_sw_o (
        .prog_clk(prog_clk)
        ,.prog_rst(prog_rst)
        ,.prog_done(prog_done)
        ,.prog_we(prog_we)
        ,.prog_din(_i_prog_data_ff__prog_dout)
        ,.prog_dout(_i_prog_data_i_sw_o__prog_dout)
        ,.prog_data(_i_prog_data_i_sw_o__prog_data)
        );
        
    assign o = _i_sw_o__o;
    assign prog_dout = _i_prog_data_i_sw_o__prog_dout;

endmodule
// Automatically generated by PRGA's RTL generator
module sw2 (
    input wire [1:0] i
    , output reg [0:0] o

    , input wire [0:0] prog_done
    , input wire [1:0] prog_data
    );

    always @* begin
        if (~prog_done) begin
            o = 1'b0;
        end else begin
            o = 1'b0;   // if ``prog_data == 0`` or ``prog_data`` out of bound, output 0
            case (prog_data)
                2'd1: o = i[0];
                2'd2: o = i[1];
            endcase
        end
    end

endmodule// Automatically generated by PRGA's RTL generator
module sw3 (
    input wire [2:0] i
    , output reg [0:0] o

    , input wire [0:0] prog_done
    , input wire [1:0] prog_data
    );

    always @* begin
        if (~prog_done) begin
            o = 1'b0;
        end else begin
            o = 1'b0;   // if ``prog_data == 0`` or ``prog_data`` out of bound, output 0
            case (prog_data)
                2'd1: o = i[0];
                2'd2: o = i[1];
                2'd3: o = i[2];
            endcase
        end
    end

endmodule// Automatically generated by PRGA's RTL generator
module scanchain_delim (
    input wire [0:0] prog_clk
    , input wire [0:0] prog_rst
    , input wire [0:0] prog_done

    , input wire [0:0] prog_we
    , input wire [1 - 1:0] prog_din

    , output reg [0:0] prog_we_o
    , output reg [1 - 1:0] prog_dout
    );

    always @(posedge prog_clk) begin
        if (prog_rst) begin
            prog_we_o <= 1'b0;
            prog_dout <= 1'b0;
        end else if (~prog_done && prog_we) begin
            prog_we_o <= 1'b1;
            prog_dout <= prog_din;
        end else begin
            prog_we_o <= 1'b0;
        end
    end

endmodule// Automatically generated by PRGA's RTL generator
module scanchain_data_d2 (
    input wire [0:0] prog_clk
    , input wire [0:0] prog_rst
    , input wire [0:0] prog_done

    , input wire [0:0] prog_we
    , input wire [1 - 1:0] prog_din

    , output reg [2 - 1:0] prog_data
    , output wire [1 - 1:0] prog_dout
    );

    localparam CHAIN_BITCOUNT = 2;
    localparam CHAIN_WIDTH = 1;

    wire [CHAIN_BITCOUNT + CHAIN_WIDTH - 1:0] prog_data_next;
    assign prog_data_next = {prog_data, prog_din};

    always @(posedge prog_clk) begin
        if (prog_rst) begin
            prog_data <= {CHAIN_BITCOUNT{1'b0}};
        end else if (~prog_done && prog_we) begin
            prog_data <= prog_data_next[0 +: CHAIN_BITCOUNT];
        end
    end

    assign prog_dout = prog_data_next[CHAIN_BITCOUNT +: CHAIN_WIDTH];

endmodule// Automatically generated by PRGA's RTL generator
module sw16 (
    input wire [15:0] i
    , output reg [0:0] o

    , input wire [0:0] prog_done
    , input wire [4:0] prog_data
    );

    always @* begin
        if (~prog_done) begin
            o = 1'b0;
        end else begin
            o = 1'b0;   // if ``prog_data == 0`` or ``prog_data`` out of bound, output 0
            case (prog_data)
                5'd1: o = i[0];
                5'd2: o = i[1];
                5'd3: o = i[2];
                5'd4: o = i[3];
                5'd5: o = i[4];
                5'd6: o = i[5];
                5'd7: o = i[6];
                5'd8: o = i[7];
                5'd9: o = i[8];
                5'd10: o = i[9];
                5'd11: o = i[10];
                5'd12: o = i[11];
                5'd13: o = i[12];
                5'd14: o = i[13];
                5'd15: o = i[14];
                5'd16: o = i[15];
            endcase
        end
    end

endmodule// Automatically generated by PRGA's RTL generator
module scanchain_data_d5 (
    input wire [0:0] prog_clk
    , input wire [0:0] prog_rst
    , input wire [0:0] prog_done

    , input wire [0:0] prog_we
    , input wire [1 - 1:0] prog_din

    , output reg [5 - 1:0] prog_data
    , output wire [1 - 1:0] prog_dout
    );

    localparam CHAIN_BITCOUNT = 5;
    localparam CHAIN_WIDTH = 1;

    wire [CHAIN_BITCOUNT + CHAIN_WIDTH - 1:0] prog_data_next;
    assign prog_data_next = {prog_data, prog_din};

    always @(posedge prog_clk) begin
        if (prog_rst) begin
            prog_data <= {CHAIN_BITCOUNT{1'b0}};
        end else if (~prog_done && prog_we) begin
            prog_data <= prog_data_next[0 +: CHAIN_BITCOUNT];
        end
    end

    assign prog_dout = prog_data_next[CHAIN_BITCOUNT +: CHAIN_WIDTH];

endmodule// Automatically generated by PRGA's RTL generator
module lut4 (
    input wire [3:0] in
    , output reg [0:0] out

    , input wire [0:0] prog_done
    , input wire [16:0] prog_data
        // prog_data[ 0 +: 15]: LUT content
        // prog_data[16]: LUT enabled (not disabled)
    );

    localparam  IDX_LUT_ENABLE = 16;

    always @* begin
        if (~prog_done || ~prog_data[IDX_LUT_ENABLE]) begin
            out = 1'b0;
        end else begin
            case (in)
                4'd0: out = prog_data[0];
                4'd1: out = prog_data[1];
                4'd2: out = prog_data[2];
                4'd3: out = prog_data[3];
                4'd4: out = prog_data[4];
                4'd5: out = prog_data[5];
                4'd6: out = prog_data[6];
                4'd7: out = prog_data[7];
                4'd8: out = prog_data[8];
                4'd9: out = prog_data[9];
                4'd10: out = prog_data[10];
                4'd11: out = prog_data[11];
                4'd12: out = prog_data[12];
                4'd13: out = prog_data[13];
                4'd14: out = prog_data[14];
                4'd15: out = prog_data[15];
            endcase
        end
    end

endmodule// Automatically generated by PRGA's RTL generator
module flipflop (
    input wire [0:0] clk
    , input wire [0:0] D
    , output reg [0:0] Q

    , input wire [0:0] prog_done    // programming finished
    , input wire [0:0] prog_data    // mode: enabled (not disabled)
    );

    always @(posedge clk) begin
        if (~prog_done || ~prog_data) begin
            Q <= 1'b0;
        end else begin
            Q <= D;
        end
    end

endmodule// Automatically generated by PRGA's RTL generator
module scanchain_data_d17 (
    input wire [0:0] prog_clk
    , input wire [0:0] prog_rst
    , input wire [0:0] prog_done

    , input wire [0:0] prog_we
    , input wire [1 - 1:0] prog_din

    , output reg [17 - 1:0] prog_data
    , output wire [1 - 1:0] prog_dout
    );

    localparam CHAIN_BITCOUNT = 17;
    localparam CHAIN_WIDTH = 1;

    wire [CHAIN_BITCOUNT + CHAIN_WIDTH - 1:0] prog_data_next;
    assign prog_data_next = {prog_data, prog_din};

    always @(posedge prog_clk) begin
        if (prog_rst) begin
            prog_data <= {CHAIN_BITCOUNT{1'b0}};
        end else if (~prog_done && prog_we) begin
            prog_data <= prog_data_next[0 +: CHAIN_BITCOUNT];
        end
    end

    assign prog_dout = prog_data_next[CHAIN_BITCOUNT +: CHAIN_WIDTH];

endmodule// Automatically generated by PRGA's RTL generator
module scanchain_data_d1 (
    input wire [0:0] prog_clk
    , input wire [0:0] prog_rst
    , input wire [0:0] prog_done

    , input wire [0:0] prog_we
    , input wire [1 - 1:0] prog_din

    , output reg [1 - 1:0] prog_data
    , output wire [1 - 1:0] prog_dout
    );

    localparam CHAIN_BITCOUNT = 1;
    localparam CHAIN_WIDTH = 1;

    wire [CHAIN_BITCOUNT + CHAIN_WIDTH - 1:0] prog_data_next;
    assign prog_data_next = {prog_data, prog_din};

    always @(posedge prog_clk) begin
        if (prog_rst) begin
            prog_data <= {CHAIN_BITCOUNT{1'b0}};
        end else if (~prog_done && prog_we) begin
            prog_data <= prog_data_next[0 +: CHAIN_BITCOUNT];
        end
    end

    assign prog_dout = prog_data_next[CHAIN_BITCOUNT +: CHAIN_WIDTH];

endmodule
